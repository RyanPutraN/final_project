import time
import requests
import math
import random
import RPi.GPIO as GPIO
import Adafruit_DHT
import schedule

# //////////////////////////////////////////////////////////////

TOKEN = "BBFF-Kl3MAUCHe5ipd78OPacdCn0NtSr01l"  # Put your TOKEN here
DEVICE_LABEL = "farmaway"  # Put your device label here 
VARIABLE_LABEL_1 = "humidity"  # Put your first variable label here
VARIABLE_LABEL_2 = "temperature"  # Put your second variable label here
VARIABLE_LABEL_3 = "soil"  # Put your second variable label here


#-----------------------INPUTS----------------------------

soil = 20
sensor = Adafruit_DHT.DHT11
temp_pin = 16
GPIO.setmode(GPIO.BCM)

servo_pin = 21
servo_off = 7.5
servo_on = 12.5

GPIO.setup(servo_pin, GPIO.OUT)
GPIO.setup(soil, GPIO.IN)

# servo control
pwm = GPIO.PWM(servo_pin, 50)
pwm.start(servo_off)

# banyak air saat panas/adem
much_water_hot = 10
much_water_cool = 5

#----------------------FUNCTIONS-------------------------

# DHT11 sensor updates
def check_temp():
    humidity, temperature = Adafruit_DHT.read_retry(sensor, temp_pin)
    if temperature > 40:
        print(temperature)
        tempr = 1
        print("hot", tempr)
    else:
        print(temperature)
        tempr = 0
        print("no hot", tempr)
        
    return tempr,humidity,temperature

# Soil moisture sensor function
def soil_go():
    water = GPIO.input(soil)
    if water == 0:
        pwm.ChangeDutyCycle(servo_off)
        print("yes", water)
    elif water == 1:
        pwm.ChangeDutyCycle(servo_on)
        print("no", water)
        if check_temp()[0] == 1:
            time.sleep(much_water_hot)
        else:
            time.sleep(much_water_cool)
            
    pwm.ChangeDutyCycle(7.5)
    return water



def build_payload(variable_1, variable_2, variable_3):
    # Creates two random values for sending data
    value_1 = check_temp()[1]
    value_2 = check_temp()[2]
    value_3 = soil_go()

    # Creates a random gps coordinates
    payload = {variable_1: value_1,
               variable_2: value_2,
               variable_3: value_3}

    return payload


def post_request(payload):
    # Creates the headers for the HTTP requests
    url = "http://industrial.api.ubidots.com"
    url = "{}/api/v1.6/devices/{}".format(url, DEVICE_LABEL)
    headers = {"X-Auth-Token": TOKEN, "Content-Type": "application/json"}

    # Makes the HTTP requests
    status = 400
    attempts = 0
    while status >= 400 and attempts <= 5:
        req = requests.post(url=url, headers=headers, json=payload)
        status = req.status_code
        attempts += 1
        time.sleep(1)

    # Processes results
    print(req.status_code, req.json())
    if status >= 400:
        print("[ERROR] Could not send data after 5 attempts, please check \
            your token credentials and internet connection")
        return False

    print("[INFO] request made properly, your device is updated")
    return True


def main():
    payload = build_payload(
        VARIABLE_LABEL_1, VARIABLE_LABEL_2, VARIABLE_LABEL_3)

    print("[INFO] Attemping to send data")
    post_request(payload)
    print("[INFO] finished")
    
# Task scheduling

# Tiap Menit
schedule.every(1).minutes.do(check_temp)
 
# Tiap Jam
# schedule.every().hour.do(function_name)
 
# Tiap hari pada waktu
schedule.every().day.at("11:01").do(soil_go)

# Antara tiap menit sampai menit
# schedule.every(5).to(10).minutes.do(function_name)
 
# Tiap sehari
# schedule.every().monday.do(function_name)
 
# Tiap sehari pada waktu
# schedule.every().tuesday.at("18:00").do(function_name)



while True:
    schedule.run_pending()
    time.sleep(65) # untuk menunggu check_temp update
    main()
    time.sleep(1)



